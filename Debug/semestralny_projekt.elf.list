
semestralny_projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a54  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ba0  08001ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001ba4  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  20000004  08001ba8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000040  08001ba8  00020040  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000629b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000011a1  00000000  00000000  000262c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008c0  00000000  00000000  00027470  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e8  00000000  00000000  00027d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002c4c  00000000  00000000  00028518  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002759  00000000  00000000  0002b164  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002d8bd  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000245c  00000000  00000000  0002d93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002fd98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08001b78 	.word	0x08001b78

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08001b78 	.word	0x08001b78

0800017c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <NVIC_PriorityGroupConfig+0x20>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800018c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000190:	60d3      	str	r3, [r2, #12]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	230f      	movs	r3, #15
 80001b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d038      	beq.n	800022e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <NVIC_Init+0xb8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f1c3 0304 	rsb	r3, r3, #4
 80001d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	fa42 f303 	asr.w	r3, r2, r3
 80001da:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	461a      	mov	r2, r3
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	fa02 f303 	lsl.w	r3, r2, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	789a      	ldrb	r2, [r3, #2]
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4013      	ands	r3, r2
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <NVIC_Init+0xbc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	7bfa      	ldrb	r2, [r7, #15]
 800020a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <NVIC_Init+0xbc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022c:	e00f      	b.n	800024e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <NVIC_Init+0xbc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	095b      	lsrs	r3, r3, #5
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 031f 	and.w	r3, r3, #31
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	f100 0320 	add.w	r3, r0, #32
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000e100 	.word	0xe000e100

08000260 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800027e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000282:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	791b      	ldrb	r3, [r3, #4]
 8000288:	021a      	lsls	r2, r3, #8
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4313      	orrs	r3, r2
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	4313      	orrs	r3, r2
 8000294:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <ADC_Init+0xa4>)
 80002a6:	4013      	ands	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	691a      	ldr	r2, [r3, #16]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002b8:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	795b      	ldrb	r3, [r3, #5]
 80002be:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002c0:	4313      	orrs	r3, r2
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4313      	orrs	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80002da:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	7d1b      	ldrb	r3, [r3, #20]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	7afb      	ldrb	r3, [r7, #11]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80002ea:	7afb      	ldrb	r3, [r7, #11]
 80002ec:	051b      	lsls	r3, r3, #20
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	c0fff7fd 	.word	0xc0fff7fd

08000308 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d006      	beq.n	8000328 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f043 0201 	orr.w	r2, r3, #1
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000326:	e005      	b.n	8000334 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f023 0201 	bic.w	r2, r3, #1
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	609a      	str	r2, [r3, #8]
  }
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	4608      	mov	r0, r1
 800034a:	4611      	mov	r1, r2
 800034c:	461a      	mov	r2, r3
 800034e:	4603      	mov	r3, r0
 8000350:	70fb      	strb	r3, [r7, #3]
 8000352:	460b      	mov	r3, r1
 8000354:	70bb      	strb	r3, [r7, #2]
 8000356:	4613      	mov	r3, r2
 8000358:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	2b1d      	cmp	r3, #29
 8000366:	d923      	bls.n	80003b0 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800036c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	f1a3 021e 	sub.w	r2, r3, #30
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	2207      	movs	r2, #7
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	43db      	mvns	r3, r3
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4013      	ands	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 800038c:	7879      	ldrb	r1, [r7, #1]
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	f1a3 021e 	sub.w	r2, r3, #30
 8000394:	4613      	mov	r3, r2
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	4413      	add	r3, r2
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003a0:	68fa      	ldr	r2, [r7, #12]
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80003ae:	e06c      	b.n	800048a <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b13      	cmp	r3, #19
 80003b4:	d923      	bls.n	80003fe <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	f1a3 0214 	sub.w	r2, r3, #20
 80003c2:	4613      	mov	r3, r2
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	4413      	add	r3, r2
 80003c8:	2207      	movs	r2, #7
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	43db      	mvns	r3, r3
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	4013      	ands	r3, r2
 80003d8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 80003da:	7879      	ldrb	r1, [r7, #1]
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	f1a3 0214 	sub.w	r2, r3, #20
 80003e2:	4613      	mov	r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4413      	add	r3, r2
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	e045      	b.n	800048a <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	2b09      	cmp	r3, #9
 8000402:	d923      	bls.n	800044c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	691b      	ldr	r3, [r3, #16]
 8000408:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	f1a3 020a 	sub.w	r2, r3, #10
 8000410:	4613      	mov	r3, r2
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	4413      	add	r3, r2
 8000416:	2207      	movs	r2, #7
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	43db      	mvns	r3, r3
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	4013      	ands	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000428:	7879      	ldrb	r1, [r7, #1]
 800042a:	78fb      	ldrb	r3, [r7, #3]
 800042c:	f1a3 020a 	sub.w	r2, r3, #10
 8000430:	4613      	mov	r3, r2
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	4413      	add	r3, r2
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	4313      	orrs	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	611a      	str	r2, [r3, #16]
 800044a:	e01e      	b.n	800048a <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000452:	78fa      	ldrb	r2, [r7, #3]
 8000454:	4613      	mov	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	4413      	add	r3, r2
 800045a:	2207      	movs	r2, #7
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	43db      	mvns	r3, r3
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4013      	ands	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800046c:	7879      	ldrb	r1, [r7, #1]
 800046e:	78fa      	ldrb	r2, [r7, #3]
 8000470:	4613      	mov	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	4313      	orrs	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800048a:	78bb      	ldrb	r3, [r7, #2]
 800048c:	2b06      	cmp	r3, #6
 800048e:	d821      	bhi.n	80004d4 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000494:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8000496:	78bb      	ldrb	r3, [r7, #2]
 8000498:	1e5a      	subs	r2, r3, #1
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	221f      	movs	r2, #31
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	43db      	mvns	r3, r3
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	4013      	ands	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004b2:	78f9      	ldrb	r1, [r7, #3]
 80004b4:	78bb      	ldrb	r3, [r7, #2]
 80004b6:	1e5a      	subs	r2, r3, #1
 80004b8:	4613      	mov	r3, r2
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004d2:	e095      	b.n	8000600 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80004d4:	78bb      	ldrb	r3, [r7, #2]
 80004d6:	2b0c      	cmp	r3, #12
 80004d8:	d821      	bhi.n	800051e <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004de:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 80004e0:	78bb      	ldrb	r3, [r7, #2]
 80004e2:	1fda      	subs	r2, r3, #7
 80004e4:	4613      	mov	r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	4413      	add	r3, r2
 80004ea:	221f      	movs	r2, #31
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	43db      	mvns	r3, r3
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80004fc:	78f9      	ldrb	r1, [r7, #3]
 80004fe:	78bb      	ldrb	r3, [r7, #2]
 8000500:	1fda      	subs	r2, r3, #7
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	4313      	orrs	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800051c:	e070      	b.n	8000600 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800051e:	78bb      	ldrb	r3, [r7, #2]
 8000520:	2b12      	cmp	r3, #18
 8000522:	d823      	bhi.n	800056c <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000528:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800052a:	78bb      	ldrb	r3, [r7, #2]
 800052c:	f1a3 020d 	sub.w	r2, r3, #13
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	221f      	movs	r2, #31
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	43db      	mvns	r3, r3
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000548:	78f9      	ldrb	r1, [r7, #3]
 800054a:	78bb      	ldrb	r3, [r7, #2]
 800054c:	f1a3 020d 	sub.w	r2, r3, #13
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4313      	orrs	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800056a:	e049      	b.n	8000600 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 800056c:	78bb      	ldrb	r3, [r7, #2]
 800056e:	2b18      	cmp	r3, #24
 8000570:	d823      	bhi.n	80005ba <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000576:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000578:	78bb      	ldrb	r3, [r7, #2]
 800057a:	f1a3 0213 	sub.w	r2, r3, #19
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	221f      	movs	r2, #31
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	43db      	mvns	r3, r3
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	4013      	ands	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000596:	78f9      	ldrb	r1, [r7, #3]
 8000598:	78bb      	ldrb	r3, [r7, #2]
 800059a:	f1a3 0213 	sub.w	r2, r3, #19
 800059e:	4613      	mov	r3, r2
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80005b8:	e022      	b.n	8000600 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 80005c0:	78bb      	ldrb	r3, [r7, #2]
 80005c2:	f1a3 0219 	sub.w	r2, r3, #25
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	221f      	movs	r2, #31
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 80005de:	78f9      	ldrb	r1, [r7, #3]
 80005e0:	78bb      	ldrb	r3, [r7, #2]
 80005e2:	f1a3 0219 	sub.w	r2, r3, #25
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	609a      	str	r2, [r3, #8]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000638:	b29b      	uxth	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	807b      	strh	r3, [r7, #2]
 8000650:	4613      	mov	r3, r2
 8000652:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 800065e:	2201      	movs	r2, #1
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000668:	787b      	ldrb	r3, [r7, #1]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 800067a:	e006      	b.n	800068a <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	43db      	mvns	r3, r3
 8000684:	401a      	ands	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	605a      	str	r2, [r3, #4]
  }
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	4013      	ands	r3, r2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
 80006b4:	e001      	b.n	80006ba <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80006d4:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <EXTI_Init+0xe0>)
 80006d6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	799b      	ldrb	r3, [r3, #6]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d04f      	beq.n	8000780 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80006e0:	4931      	ldr	r1, [pc, #196]	; (80007a8 <EXTI_Init+0xe0>)
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <EXTI_Init+0xe0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	43db      	mvns	r3, r3
 80006ec:	4013      	ands	r3, r2
 80006ee:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80006f0:	492d      	ldr	r1, [pc, #180]	; (80007a8 <EXTI_Init+0xe0>)
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <EXTI_Init+0xe0>)
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4013      	ands	r3, r2
 80006fe:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	461a      	mov	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4413      	add	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	6811      	ldr	r1, [r2, #0]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	430a      	orrs	r2, r1
 8000718:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800071a:	4923      	ldr	r1, [pc, #140]	; (80007a8 <EXTI_Init+0xe0>)
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <EXTI_Init+0xe0>)
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	43db      	mvns	r3, r3
 8000726:	4013      	ands	r3, r2
 8000728:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800072a:	491f      	ldr	r1, [pc, #124]	; (80007a8 <EXTI_Init+0xe0>)
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <EXTI_Init+0xe0>)
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	43db      	mvns	r3, r3
 8000736:	4013      	ands	r3, r2
 8000738:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	2b10      	cmp	r3, #16
 8000740:	d10e      	bne.n	8000760 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000742:	4919      	ldr	r1, [pc, #100]	; (80007a8 <EXTI_Init+0xe0>)
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <EXTI_Init+0xe0>)
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000750:	4915      	ldr	r1, [pc, #84]	; (80007a8 <EXTI_Init+0xe0>)
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <EXTI_Init+0xe0>)
 8000754:	68da      	ldr	r2, [r3, #12]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4313      	orrs	r3, r2
 800075c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800075e:	e01d      	b.n	800079c <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <EXTI_Init+0xe0>)
 8000762:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	461a      	mov	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	6811      	ldr	r1, [r2, #0]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	430a      	orrs	r2, r1
 800077c:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800077e:	e00d      	b.n	800079c <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	461a      	mov	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	6811      	ldr	r1, [r2, #0]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	43d2      	mvns	r2, r2
 8000798:	400a      	ands	r2, r1
 800079a:	601a      	str	r2, [r3, #0]
  }
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40010400 	.word	0x40010400

080007ac <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <EXTI_GetFlagStatus+0x30>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4013      	ands	r3, r2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80007c4:	2301      	movs	r3, #1
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e001      	b.n	80007ce <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40010400 	.word	0x40010400

080007e0 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <EXTI_ClearFlag+0x18>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6153      	str	r3, [r2, #20]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40010400 	.word	0x40010400

080007fc <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	e07e      	b.n	8000916 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000818:	2201      	movs	r2, #1
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d16d      	bne.n	8000910 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2103      	movs	r1, #3
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	401a      	ands	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	4619      	mov	r1, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	431a      	orrs	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d003      	beq.n	8000872 <GPIO_Init+0x76>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d136      	bne.n	80008e0 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2103      	movs	r1, #3
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	401a      	ands	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	4619      	mov	r1, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	431a      	orrs	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	889b      	ldrh	r3, [r3, #4]
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	2101      	movs	r1, #1
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4013      	ands	r3, r2
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	889b      	ldrh	r3, [r3, #4]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	799b      	ldrb	r3, [r3, #6]
 80008ca:	4619      	mov	r1, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b21b      	sxth	r3, r3
 80008da:	b29a      	uxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68da      	ldr	r2, [r3, #12]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2103      	movs	r1, #3
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	401a      	ands	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	79db      	ldrb	r3, [r3, #7]
 8000900:	4619      	mov	r1, r3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3301      	adds	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	f67f af7d 	bls.w	8000818 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800091e:	bf00      	nop
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	887a      	ldrh	r2, [r7, #2]
 8000938:	831a      	strh	r2, [r3, #24]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	887a      	ldrh	r2, [r7, #2]
 8000954:	835a      	strh	r2, [r3, #26]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	8a9b      	ldrh	r3, [r3, #20]
 8000970:	b29a      	uxth	r2, r3
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	4053      	eors	r3, r2
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	829a      	strh	r2, [r3, #20]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	807b      	strh	r3, [r7, #2]
 8000994:	4613      	mov	r3, r2
 8000996:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80009a0:	787a      	ldrb	r2, [r7, #1]
 80009a2:	887b      	ldrh	r3, [r7, #2]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3208      	adds	r2, #8
 80009c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	210f      	movs	r1, #15
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	ea02 0103 	and.w	r1, r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f100 0208 	add.w	r2, r0, #8
 80009e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3208      	adds	r2, #8
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <RCC_HSICmd+0x1c>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	42470000 	.word	0x42470000

08000a38 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000a4a:	4909      	ldr	r1, [pc, #36]	; (8000a70 <RCC_AHBPeriphClockCmd+0x38>)
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <RCC_AHBPeriphClockCmd+0x38>)
 8000a4e:	69da      	ldr	r2, [r3, #28]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000a56:	e006      	b.n	8000a66 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000a58:	4905      	ldr	r1, [pc, #20]	; (8000a70 <RCC_AHBPeriphClockCmd+0x38>)
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <RCC_AHBPeriphClockCmd+0x38>)
 8000a5c:	69da      	ldr	r2, [r3, #28]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	4013      	ands	r3, r2
 8000a64:	61cb      	str	r3, [r1, #28]
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	40023800 	.word	0x40023800

08000a74 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a86:	4909      	ldr	r1, [pc, #36]	; (8000aac <RCC_APB2PeriphClockCmd+0x38>)
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <RCC_APB2PeriphClockCmd+0x38>)
 8000a8a:	6a1a      	ldr	r2, [r3, #32]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a92:	e006      	b.n	8000aa2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a94:	4905      	ldr	r1, [pc, #20]	; (8000aac <RCC_APB2PeriphClockCmd+0x38>)
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <RCC_APB2PeriphClockCmd+0x38>)
 8000a98:	6a1a      	ldr	r2, [r3, #32]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	620b      	str	r3, [r1, #32]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40023800 	.word	0x40023800

08000ab0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ac2:	4909      	ldr	r1, [pc, #36]	; (8000ae8 <RCC_APB1PeriphClockCmd+0x38>)
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <RCC_APB1PeriphClockCmd+0x38>)
 8000ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ace:	e006      	b.n	8000ade <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ad0:	4905      	ldr	r1, [pc, #20]	; (8000ae8 <RCC_APB1PeriphClockCmd+0x38>)
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <RCC_APB1PeriphClockCmd+0x38>)
 8000ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4013      	ands	r3, r2
 8000adc:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40023800 	.word	0x40023800

08000aec <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000aec:	b490      	push	{r4, r7}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	220f      	movs	r2, #15
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000b10:	4916      	ldr	r1, [pc, #88]	; (8000b6c <SYSCFG_EXTILineConfig+0x80>)
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <SYSCFG_EXTILineConfig+0x80>)
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	3302      	adds	r3, #2
 8000b24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	1c83      	adds	r3, r0, #2
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <SYSCFG_EXTILineConfig+0x80>)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461c      	mov	r4, r3
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <SYSCFG_EXTILineConfig+0x80>)
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b4c:	79f9      	ldrb	r1, [r7, #7]
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	1ca3      	adds	r3, r4, #2
 8000b5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc90      	pop	{r4, r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40010000 	.word	0x40010000

08000b70 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8a:	d00b      	beq.n	8000ba4 <TIM_TimeBaseInit+0x34>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <TIM_TimeBaseInit+0x90>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d007      	beq.n	8000ba4 <TIM_TimeBaseInit+0x34>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <TIM_TimeBaseInit+0x94>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d003      	beq.n	8000ba4 <TIM_TimeBaseInit+0x34>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <TIM_TimeBaseInit+0x98>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d108      	bne.n	8000bb6 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000baa:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	885a      	ldrh	r2, [r3, #2]
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <TIM_TimeBaseInit+0x9c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00c      	beq.n	8000bd8 <TIM_TimeBaseInit+0x68>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <TIM_TimeBaseInit+0xa0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d008      	beq.n	8000bd8 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bcc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	891a      	ldrh	r2, [r3, #8]
 8000bd2:	89fb      	ldrh	r3, [r7, #14]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	89fa      	ldrh	r2, [r7, #14]
 8000bdc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	829a      	strh	r2, [r3, #20]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40000400 	.word	0x40000400
 8000c04:	40000800 	.word	0x40000800
 8000c08:	40000c00 	.word	0x40000c00
 8000c0c:	40001000 	.word	0x40001000
 8000c10:	40001400 	.word	0x40001400

08000c14 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d008      	beq.n	8000c38 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000c36:	e007      	b.n	8000c48 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	801a      	strh	r2, [r3, #0]
  }
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	81fb      	strh	r3, [r7, #14]
 8000c62:	2300      	movs	r3, #0
 8000c64:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	8c1b      	ldrh	r3, [r3, #32]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	f023 0301 	bic.w	r3, r3, #1
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	8c1b      	ldrh	r3, [r3, #32]
 8000c7a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	8b1b      	ldrh	r3, [r3, #24]
 8000c80:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c88:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000c8a:	89fb      	ldrh	r3, [r7, #14]
 8000c8c:	f023 0303 	bic.w	r3, r3, #3
 8000c90:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	881a      	ldrh	r2, [r3, #0]
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000c9c:	89bb      	ldrh	r3, [r7, #12]
 8000c9e:	f023 0302 	bic.w	r3, r3, #2
 8000ca2:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	891a      	ldrh	r2, [r3, #8]
 8000ca8:	89bb      	ldrh	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	885a      	ldrh	r2, [r3, #2]
 8000cb2:	89bb      	ldrh	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	89fa      	ldrh	r2, [r7, #14]
 8000cc4:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	89ba      	ldrh	r2, [r7, #12]
 8000cca:	841a      	strh	r2, [r3, #32]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10f      	bne.n	8000d0a <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	8859      	ldrh	r1, [r3, #2]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	889a      	ldrh	r2, [r3, #4]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	891b      	ldrh	r3, [r3, #8]
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f916 	bl	8000f28 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	88db      	ldrh	r3, [r3, #6]
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f83c 	bl	8000d80 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000d08:	e036      	b.n	8000d78 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d10f      	bne.n	8000d32 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	8859      	ldrh	r1, [r3, #2]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	889a      	ldrh	r2, [r3, #4]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	891b      	ldrh	r3, [r3, #8]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f944 	bl	8000fac <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	88db      	ldrh	r3, [r3, #6]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f844 	bl	8000db8 <TIM_SetIC2Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000d30:	e022      	b.n	8000d78 <TIM_ICInit+0xa0>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	2b08      	cmp	r3, #8
 8000d38:	d10f      	bne.n	8000d5a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	8859      	ldrh	r1, [r3, #2]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	889a      	ldrh	r2, [r3, #4]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	891b      	ldrh	r3, [r3, #8]
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f97c 	bl	8001044 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	88db      	ldrh	r3, [r3, #6]
 8000d50:	4619      	mov	r1, r3
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f84e 	bl	8000df4 <TIM_SetIC3Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000d58:	e00e      	b.n	8000d78 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	8859      	ldrh	r1, [r3, #2]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	889a      	ldrh	r2, [r3, #4]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	891b      	ldrh	r3, [r3, #8]
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 f9b4 	bl	80010d4 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	88db      	ldrh	r3, [r3, #6]
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f85a 	bl	8000e2c <TIM_SetIC4Prescaler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	8b1b      	ldrh	r3, [r3, #24]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f023 030c 	bic.w	r3, r3, #12
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	8b1b      	ldrh	r3, [r3, #24]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	831a      	strh	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	8b1b      	ldrh	r3, [r3, #24]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	8b1b      	ldrh	r3, [r3, #24]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	831a      	strh	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	8b9b      	ldrh	r3, [r3, #28]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	f023 030c 	bic.w	r3, r3, #12
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	8b9b      	ldrh	r3, [r3, #28]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	839a      	strh	r2, [r3, #28]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events.
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events.
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	8b9b      	ldrh	r3, [r3, #28]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	8b9b      	ldrh	r3, [r3, #28]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	839a      	strh	r2, [r3, #28]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	899b      	ldrh	r3, [r3, #12]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000e8e:	e009      	b.n	8000ea4 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	899b      	ldrh	r3, [r3, #12]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	819a      	strh	r2, [r3, #12]
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <TIM_GetFlagStatus>:
  *     TIM_FLAG_CC1OF or TIM_FLAG_CC2OF flags.  
  * @note TIM10 and TIM11 can have only update flag, TIM_FLAG_CC1 or TIM_FLAG_CC1OF flags         
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET; 
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	8a1b      	ldrh	r3, [r3, #16]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e001      	b.n	8000eda <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <TIM_ClearFlag>:
  * @note TIM10 and TIM11 can have only update flag, TIM_FLAG_CC1
  *     or TIM_FLAG_CC1OF flags      
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	821a      	strh	r2, [r3, #16]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	821a      	strh	r2, [r3, #16]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4603      	mov	r3, r0
 8000f38:	817b      	strh	r3, [r7, #10]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	813b      	strh	r3, [r7, #8]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	82fb      	strh	r3, [r7, #22]
 8000f46:	2300      	movs	r3, #0
 8000f48:	82bb      	strh	r3, [r7, #20]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8c1b      	ldrh	r3, [r3, #32]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8b1b      	ldrh	r3, [r3, #24]
 8000f5e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8c1b      	ldrh	r3, [r3, #32]
 8000f64:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8000f66:	8afb      	ldrh	r3, [r7, #22]
 8000f68:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000f6c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	893b      	ldrh	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8000f80:	8abb      	ldrh	r3, [r7, #20]
 8000f82:	f023 030a 	bic.w	r3, r3, #10
 8000f86:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000f88:	897a      	ldrh	r2, [r7, #10]
 8000f8a:	8abb      	ldrh	r3, [r7, #20]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8afa      	ldrh	r2, [r7, #22]
 8000f9a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	8aba      	ldrh	r2, [r7, #20]
 8000fa0:	841a      	strh	r2, [r3, #32]
}
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	817b      	strh	r3, [r7, #10]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	813b      	strh	r3, [r7, #8]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	82fb      	strh	r3, [r7, #22]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	82bb      	strh	r3, [r7, #20]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	8c1b      	ldrh	r3, [r3, #32]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	f023 0310 	bic.w	r3, r3, #16
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8b1b      	ldrh	r3, [r3, #24]
 8000fe6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8c1b      	ldrh	r3, [r3, #32]
 8000fec:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000fee:	897b      	ldrh	r3, [r7, #10]
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8000ff4:	8afb      	ldrh	r3, [r7, #22]
 8000ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ffa:	051b      	lsls	r3, r3, #20
 8000ffc:	0d1b      	lsrs	r3, r3, #20
 8000ffe:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	031b      	lsls	r3, r3, #12
 8001004:	b29a      	uxth	r2, r3
 8001006:	8afb      	ldrh	r3, [r7, #22]
 8001008:	4313      	orrs	r3, r2
 800100a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800100c:	893b      	ldrh	r3, [r7, #8]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b29a      	uxth	r2, r3
 8001012:	8afb      	ldrh	r3, [r7, #22]
 8001014:	4313      	orrs	r3, r2
 8001016:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001018:	8abb      	ldrh	r3, [r7, #20]
 800101a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800101e:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001020:	8a7a      	ldrh	r2, [r7, #18]
 8001022:	8abb      	ldrh	r3, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	b29b      	uxth	r3, r3
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8afa      	ldrh	r2, [r7, #22]
 8001032:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8aba      	ldrh	r2, [r7, #20]
 8001038:	841a      	strh	r2, [r3, #32]
}
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	4603      	mov	r3, r0
 8001054:	817b      	strh	r3, [r7, #10]
 8001056:	460b      	mov	r3, r1
 8001058:	813b      	strh	r3, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	82fb      	strh	r3, [r7, #22]
 8001062:	2300      	movs	r3, #0
 8001064:	82bb      	strh	r3, [r7, #20]
 8001066:	2300      	movs	r3, #0
 8001068:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8c1b      	ldrh	r3, [r3, #32]
 800106e:	b29b      	uxth	r3, r3
 8001070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001074:	b29a      	uxth	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8b9b      	ldrh	r3, [r3, #28]
 800107e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8c1b      	ldrh	r3, [r3, #32]
 8001084:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001086:	897b      	ldrh	r3, [r7, #10]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001092:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	b29a      	uxth	r2, r3
 800109a:	893b      	ldrh	r3, [r7, #8]
 800109c:	4313      	orrs	r3, r2
 800109e:	b29a      	uxth	r2, r3
 80010a0:	8afb      	ldrh	r3, [r7, #22]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80010a6:	8abb      	ldrh	r3, [r7, #20]
 80010a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80010ac:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80010ae:	8a7a      	ldrh	r2, [r7, #18]
 80010b0:	8abb      	ldrh	r3, [r7, #20]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8afa      	ldrh	r2, [r7, #22]
 80010c0:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8aba      	ldrh	r2, [r7, #20]
 80010c6:	841a      	strh	r2, [r3, #32]
}
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	4608      	mov	r0, r1
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	817b      	strh	r3, [r7, #10]
 80010e6:	460b      	mov	r3, r1
 80010e8:	813b      	strh	r3, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	82fb      	strh	r3, [r7, #22]
 80010f2:	2300      	movs	r3, #0
 80010f4:	82bb      	strh	r3, [r7, #20]
 80010f6:	2300      	movs	r3, #0
 80010f8:	827b      	strh	r3, [r7, #18]
  
  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8c1b      	ldrh	r3, [r3, #32]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001104:	b29a      	uxth	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8b9b      	ldrh	r3, [r3, #28]
 800110e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8c1b      	ldrh	r3, [r3, #32]
 8001114:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8001116:	897b      	ldrh	r3, [r7, #10]
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 800111c:	8afb      	ldrh	r3, [r7, #22]
 800111e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001122:	051b      	lsls	r3, r3, #20
 8001124:	0d1b      	lsrs	r3, r3, #20
 8001126:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001128:	893b      	ldrh	r3, [r7, #8]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b29a      	uxth	r2, r3
 800112e:	8afb      	ldrh	r3, [r7, #22]
 8001130:	4313      	orrs	r3, r2
 8001132:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	031b      	lsls	r3, r3, #12
 8001138:	b29a      	uxth	r2, r3
 800113a:	8afb      	ldrh	r3, [r7, #22]
 800113c:	4313      	orrs	r3, r2
 800113e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001146:	045b      	lsls	r3, r3, #17
 8001148:	0c5b      	lsrs	r3, r3, #17
 800114a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800114c:	8a7a      	ldrh	r2, [r7, #18]
 800114e:	8abb      	ldrh	r3, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	b29b      	uxth	r3, r3
 8001154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001158:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8afa      	ldrh	r2, [r7, #22]
 800115e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8aba      	ldrh	r2, [r7, #20]
 8001164:	841a      	strh	r2, [r3, #32]
}
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <lcdInit>:
void upNib(uint8_t c);
void downNib(uint8_t c);
void Delay(uint32_t nCount);

/************************************ inicializuj LCD **********************************/
void lcdInit(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);						//GPIOA clock enable
 8001176:	2101      	movs	r1, #1
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fc5d 	bl	8000a38 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;									//GPIOA initialization
	GPIO_InitStructure.GPIO_Pin   = EN | RS | D4 | D5 | D6 | D7 | GPIO_Pin_5;
 800117e:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8001182:	603b      	str	r3, [r7, #0]
	GPIO_ResetBits(LCD_Port, EN | RS | D4 | D5 | D6 | D7);
 8001184:	f240 7192 	movw	r1, #1938	; 0x792
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <lcdInit+0x7c>)
 800118a:	f7ff fbdb 	bl	8000944 <GPIO_ResetBits>
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 800118e:	2301      	movs	r3, #1
 8001190:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001192:	2300      	movs	r3, #0
 8001194:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001196:	2302      	movs	r3, #2
 8001198:	717b      	strb	r3, [r7, #5]
	GPIO_Init(LCD_Port, &GPIO_InitStructure);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <lcdInit+0x7c>)
 80011a0:	f7ff fb2c 	bl	80007fc <GPIO_Init>

	GPIO_ResetBits(LCD_Port, EN | RS | D4 | D5 | D6 | D7);
 80011a4:	f240 7192 	movw	r1, #1938	; 0x792
 80011a8:	4810      	ldr	r0, [pc, #64]	; (80011ec <lcdInit+0x7c>)
 80011aa:	f7ff fbcb 	bl	8000944 <GPIO_ResetBits>
	Delay(0xffff);
 80011ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011b2:	f000 f9d9 	bl	8001568 <Delay>
	sendCMD(0x02);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f000 f8c4 	bl	8001344 <sendCMD>
	Delay(0x3FFFC);  //wait 20ms
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <lcdInit+0x80>)
 80011be:	f000 f9d3 	bl	8001568 <Delay>
	sendCMD(0x28);  //LCD configs
 80011c2:	2028      	movs	r0, #40	; 0x28
 80011c4:	f000 f8be 	bl	8001344 <sendCMD>
	sendCMD(0x06);
 80011c8:	2006      	movs	r0, #6
 80011ca:	f000 f8bb 	bl	8001344 <sendCMD>
	sendCMD(0x01);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 f8b8 	bl	8001344 <sendCMD>
	sendCMD(0x0E);
 80011d4:	200e      	movs	r0, #14
 80011d6:	f000 f8b5 	bl	8001344 <sendCMD>
	Delay(0xffff);
 80011da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011de:	f000 f9c3 	bl	8001568 <Delay>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020000 	.word	0x40020000
 80011f0:	0003fffc 	.word	0x0003fffc

080011f4 <strobeEN>:
/************************************ generuj hodinovy signal pre LCD ******************/
void strobeEN(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	Delay(0x3ff);
 80011f8:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80011fc:	f000 f9b4 	bl	8001568 <Delay>
	GPIO_SetBits(LCD_Port, EN);
 8001200:	2110      	movs	r1, #16
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <strobeEN+0x28>)
 8001204:	f7ff fb90 	bl	8000928 <GPIO_SetBits>
	Delay(0x3ff);
 8001208:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800120c:	f000 f9ac 	bl	8001568 <Delay>
	GPIO_ResetBits(LCD_Port, EN);
 8001210:	2110      	movs	r1, #16
 8001212:	4802      	ldr	r0, [pc, #8]	; (800121c <strobeEN+0x28>)
 8001214:	f7ff fb96 	bl	8000944 <GPIO_ResetBits>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020000 	.word	0x40020000

08001220 <upNib>:
/************************************ nastav horne 4 bity znaku ************************/
void upNib(uint8_t c) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	if(c & 0x80)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da05      	bge.n	800123e <upNib+0x1e>
		GPIO_SetBits(LCD_Port, D7);
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	481d      	ldr	r0, [pc, #116]	; (80012ac <upNib+0x8c>)
 8001238:	f7ff fb76 	bl	8000928 <GPIO_SetBits>
 800123c:	e004      	b.n	8001248 <upNib+0x28>
	else
		GPIO_ResetBits(LCD_Port, D7);
 800123e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001242:	481a      	ldr	r0, [pc, #104]	; (80012ac <upNib+0x8c>)
 8001244:	f7ff fb7e 	bl	8000944 <GPIO_ResetBits>
	if(c & 0x40)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <upNib+0x3e>
		GPIO_SetBits(LCD_Port, D6);
 8001252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001256:	4815      	ldr	r0, [pc, #84]	; (80012ac <upNib+0x8c>)
 8001258:	f7ff fb66 	bl	8000928 <GPIO_SetBits>
 800125c:	e004      	b.n	8001268 <upNib+0x48>
	else
		GPIO_ResetBits(LCD_Port, D6);
 800125e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001262:	4812      	ldr	r0, [pc, #72]	; (80012ac <upNib+0x8c>)
 8001264:	f7ff fb6e 	bl	8000944 <GPIO_ResetBits>
	if(c & 0x20)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <upNib+0x5e>
		GPIO_SetBits(LCD_Port, D5);
 8001272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <upNib+0x8c>)
 8001278:	f7ff fb56 	bl	8000928 <GPIO_SetBits>
 800127c:	e004      	b.n	8001288 <upNib+0x68>
	else
		GPIO_ResetBits(LCD_Port, D5);
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <upNib+0x8c>)
 8001284:	f7ff fb5e 	bl	8000944 <GPIO_ResetBits>
	if(c & 0x10)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <upNib+0x7c>
		GPIO_SetBits(LCD_Port, D4);
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <upNib+0x8c>)
 8001296:	f7ff fb47 	bl	8000928 <GPIO_SetBits>
	else
		GPIO_ResetBits(LCD_Port, D4);
}
 800129a:	e003      	b.n	80012a4 <upNib+0x84>
	else
		GPIO_ResetBits(LCD_Port, D5);
	if(c & 0x10)
		GPIO_SetBits(LCD_Port, D4);
	else
		GPIO_ResetBits(LCD_Port, D4);
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <upNib+0x8c>)
 80012a0:	f7ff fb50 	bl	8000944 <GPIO_ResetBits>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40020000 	.word	0x40020000

080012b0 <downNib>:
/************************************ nastav dolne 4 bity znaku ************************/
void downNib(uint8_t c) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	if(c & 0x8)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <downNib+0x20>
		GPIO_SetBits(LCD_Port, D7);
 80012c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c8:	481d      	ldr	r0, [pc, #116]	; (8001340 <downNib+0x90>)
 80012ca:	f7ff fb2d 	bl	8000928 <GPIO_SetBits>
 80012ce:	e004      	b.n	80012da <downNib+0x2a>
	else
		GPIO_ResetBits(LCD_Port, D7);
 80012d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d4:	481a      	ldr	r0, [pc, #104]	; (8001340 <downNib+0x90>)
 80012d6:	f7ff fb35 	bl	8000944 <GPIO_ResetBits>
	if(c & 0x4)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <downNib+0x40>
		GPIO_SetBits(LCD_Port, D6);
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	4815      	ldr	r0, [pc, #84]	; (8001340 <downNib+0x90>)
 80012ea:	f7ff fb1d 	bl	8000928 <GPIO_SetBits>
 80012ee:	e004      	b.n	80012fa <downNib+0x4a>
	else
		GPIO_ResetBits(LCD_Port, D6);
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <downNib+0x90>)
 80012f6:	f7ff fb25 	bl	8000944 <GPIO_ResetBits>
	if(c & 0x2)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <downNib+0x60>
		GPIO_SetBits(LCD_Port, D5);
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <downNib+0x90>)
 800130a:	f7ff fb0d 	bl	8000928 <GPIO_SetBits>
 800130e:	e004      	b.n	800131a <downNib+0x6a>
	else
		GPIO_ResetBits(LCD_Port, D5);
 8001310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <downNib+0x90>)
 8001316:	f7ff fb15 	bl	8000944 <GPIO_ResetBits>
	if(c & 0x1)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <downNib+0x7e>
		GPIO_SetBits(LCD_Port, D4);
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <downNib+0x90>)
 8001328:	f7ff fafe 	bl	8000928 <GPIO_SetBits>
	else
		GPIO_ResetBits(LCD_Port, D4);
}
 800132c:	e003      	b.n	8001336 <downNib+0x86>
	else
		GPIO_ResetBits(LCD_Port, D5);
	if(c & 0x1)
		GPIO_SetBits(LCD_Port, D4);
	else
		GPIO_ResetBits(LCD_Port, D4);
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <downNib+0x90>)
 8001332:	f7ff fb07 	bl	8000944 <GPIO_ResetBits>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40020000 	.word	0x40020000

08001344 <sendCMD>:
/************************************ posli prikaz *************************************/
void sendCMD(uint8_t c) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(LCD_Port, RS);
 800134e:	2102      	movs	r1, #2
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <sendCMD+0x34>)
 8001352:	f7ff faf7 	bl	8000944 <GPIO_ResetBits>
	upNib(c);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff61 	bl	8001220 <upNib>
	strobeEN();
 800135e:	f7ff ff49 	bl	80011f4 <strobeEN>
	downNib(c);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffa3 	bl	80012b0 <downNib>
	strobeEN();
 800136a:	f7ff ff43 	bl	80011f4 <strobeEN>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40020000 	.word	0x40020000

0800137c <printChar>:
/************************************ posli znak ***************************************/
void printChar(uint8_t c) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	if(((c>=0x20)&&(c<=0x7F)) || ((c>=0xA0)&&(c<=0xFF))) {	//check if 'c' is within display boundry
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b1f      	cmp	r3, #31
 800138a:	d903      	bls.n	8001394 <printChar+0x18>
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da02      	bge.n	800139a <printChar+0x1e>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b9f      	cmp	r3, #159	; 0x9f
 8001398:	d913      	bls.n	80013c2 <printChar+0x46>
		GPIO_SetBits(LCD_Port, RS);
 800139a:	2102      	movs	r1, #2
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <printChar+0x50>)
 800139e:	f7ff fac3 	bl	8000928 <GPIO_SetBits>
		upNib(c);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff3b 	bl	8001220 <upNib>
		strobeEN();
 80013aa:	f7ff ff23 	bl	80011f4 <strobeEN>
		downNib(c);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff7d 	bl	80012b0 <downNib>
		strobeEN();
 80013b6:	f7ff ff1d 	bl	80011f4 <strobeEN>
		GPIO_ResetBits(LCD_Port, RS);
 80013ba:	2102      	movs	r1, #2
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <printChar+0x50>)
 80013be:	f7ff fac1 	bl	8000944 <GPIO_ResetBits>
	}
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020000 	.word	0x40020000

080013d0 <printString>:
/************************************ posli retazec znakov *****************************/
void printString(uint8_t *s) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]
	//while (s[i] == '\0') i++;
	while(s[i] != '\0') {
 80013dc:	e009      	b.n	80013f2 <printString+0x22>
		printChar(s[i]);
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffc8 	bl	800137c <printChar>
		i++;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	3301      	adds	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
}
/************************************ posli retazec znakov *****************************/
void printString(uint8_t *s) {
	uint8_t i=0;
	//while (s[i] == '\0') i++;
	while(s[i] != '\0') {
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ef      	bne.n	80013de <printString+0xe>
		printChar(s[i]);
		i++;
	}
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop

08001408 <clearLCD>:
/************************************ vycisti displej **********************************/
void clearLCD(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	sendCMD(0x01);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff ff99 	bl	8001344 <sendCMD>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop

08001418 <cursoroff>:
/************************************ skoc do riadku dva *******************************/
void toLine2(void) {
	sendCMD(0xC0);
}
/************************************ vypni kurzor *************************************/
void cursoroff(void){
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	sendCMD(0x0C);
 800141c:	200c      	movs	r0, #12
 800141e:	f7ff ff91 	bl	8001344 <sendCMD>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop

08001428 <cursorpos>:
/************************************ nastav poziciu kurzora na LDC ********************/
void cursorpos(int col, int row){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	if (row == 1) col += 0x7f;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <cursorpos+0x16>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	337f      	adds	r3, #127	; 0x7f
 800143c:	607b      	str	r3, [r7, #4]
	if (row == 2) col += 0xbf;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d102      	bne.n	800144a <cursorpos+0x22>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	33bf      	adds	r3, #191	; 0xbf
 8001448:	607b      	str	r3, [r7, #4]
	sendCMD(col);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff78 	bl	8001344 <sendCMD>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <num2text>:

/************************************ prevod cisla na text *****************************/
int num2text(uint16_t cislo) {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]

	static uint8_t i, j, k;
	static char text[16], pom;

	i = 15;
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <num2text+0xf4>)
 8001468:	220f      	movs	r2, #15
 800146a:	701a      	strb	r2, [r3, #0]
	while (cislo > 0) {
 800146c:	e01f      	b.n	80014ae <num2text+0x52>
		text[15-i] = cislo%10 + '0';
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <num2text+0xf4>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f1c3 000f 	rsb	r0, r3, #15
 8001476:	88fa      	ldrh	r2, [r7, #6]
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <num2text+0xf8>)
 800147a:	fba3 1302 	umull	r1, r3, r3, r2
 800147e:	08d9      	lsrs	r1, r3, #3
 8001480:	460b      	mov	r3, r1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b29b      	uxth	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3330      	adds	r3, #48	; 0x30
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <num2text+0xfc>)
 8001494:	541a      	strb	r2, [r3, r0]
		cislo /= 10;
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	4a2e      	ldr	r2, [pc, #184]	; (8001554 <num2text+0xf8>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	80fb      	strh	r3, [r7, #6]
		i--;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <num2text+0xf4>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <num2text+0xf4>)
 80014ac:	701a      	strb	r2, [r3, #0]

	static uint8_t i, j, k;
	static char text[16], pom;

	i = 15;
	while (cislo > 0) {
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1dc      	bne.n	800146e <num2text+0x12>
		text[15-i] = cislo%10 + '0';
		cislo /= 10;
		i--;
	}

	i = 15;
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <num2text+0xf4>)
 80014b6:	220f      	movs	r2, #15
 80014b8:	701a      	strb	r2, [r3, #0]
	while (text[i] == '\0') i--;
 80014ba:	e005      	b.n	80014c8 <num2text+0x6c>
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <num2text+0xf4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <num2text+0xf4>)
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <num2text+0xf4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <num2text+0xfc>)
 80014d0:	5c9b      	ldrb	r3, [r3, r2]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f2      	beq.n	80014bc <num2text+0x60>

	k = i;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <num2text+0xf4>)
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <num2text+0x100>)
 80014dc:	701a      	strb	r2, [r3, #0]

	for (j=0;j<(i+1)/2;j++) {
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <num2text+0x104>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	e023      	b.n	800152e <num2text+0xd2>
		pom = text[j];
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <num2text+0x104>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <num2text+0xfc>)
 80014ee:	5c9a      	ldrb	r2, [r3, r2]
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <num2text+0x108>)
 80014f2:	701a      	strb	r2, [r3, #0]
		text[j] = text[k];
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <num2text+0x104>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <num2text+0x100>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <num2text+0xfc>)
 8001502:	5c59      	ldrb	r1, [r3, r1]
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <num2text+0xfc>)
 8001506:	5499      	strb	r1, [r3, r2]
		text[k] = pom;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <num2text+0x100>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <num2text+0x108>)
 8001510:	7819      	ldrb	r1, [r3, #0]
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <num2text+0xfc>)
 8001514:	5499      	strb	r1, [r3, r2]
		k--;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <num2text+0x100>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	3b01      	subs	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <num2text+0x100>)
 8001520:	701a      	strb	r2, [r3, #0]
	i = 15;
	while (text[i] == '\0') i--;

	k = i;

	for (j=0;j<(i+1)/2;j++) {
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <num2text+0x104>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <num2text+0x104>)
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <num2text+0x104>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4619      	mov	r1, r3
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <num2text+0xf4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	0fda      	lsrs	r2, r3, #31
 800153c:	4413      	add	r3, r2
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	4299      	cmp	r1, r3
 8001542:	dbd0      	blt.n	80014e6 <num2text+0x8a>
		pom = text[j];
		text[j] = text[k];
		text[k] = pom;
		k--;
	}
	return text;
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <num2text+0xfc>)
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000020 	.word	0x20000020
 8001554:	cccccccd 	.word	0xcccccccd
 8001558:	20000024 	.word	0x20000024
 800155c:	20000034 	.word	0x20000034
 8001560:	20000035 	.word	0x20000035
 8001564:	20000036 	.word	0x20000036

08001568 <Delay>:

void Delay(uint32_t nCount)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8001570:	e002      	b.n	8001578 <Delay+0x10>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3b01      	subs	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f9      	bne.n	8001572 <Delay+0xa>
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  *  system_stm32l1xx.c file
  */

  /* TODO - Add your application code here */

	lcdInit();
 800158c:	f7ff fdf0 	bl	8001170 <lcdInit>
	gpio_init();
 8001590:	f000 f83a 	bl	8001608 <gpio_init>
	timer_init();
 8001594:	f000 f908 	bl	80017a8 <timer_init>
	adc_init();
 8001598:	f000 f880 	bl	800169c <adc_init>
	nvic_init();
 800159c:	f000 f8ae 	bl	80016fc <nvic_init>

	clearLCD();
 80015a0:	f7ff ff32 	bl	8001408 <clearLCD>

	cursoroff();
 80015a4:	f7ff ff38 	bl	8001418 <cursoroff>
	printString("Otacky: ");
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <main+0x68>)
 80015aa:	f7ff ff11 	bl	80013d0 <printString>

  /* Infinite loop */
  while (1)
  {
		cursorpos(9,1);
 80015ae:	2101      	movs	r1, #1
 80015b0:	2009      	movs	r0, #9
 80015b2:	f7ff ff39 	bl	8001428 <cursorpos>
		printString(num2text(rpm));
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <main+0x6c>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff4e 	bl	800145c <num2text>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff04 	bl	80013d0 <printString>
		ADC_SoftwareStartConv(ADC1);
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <main+0x70>)
 80015ca:	f7ff f81f 	bl	800060c <ADC_SoftwareStartConv>
		pockaj = AD_value*256;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <main+0x74>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <main+0x78>)
 80015d8:	601a      	str	r2, [r3, #0]
		Delay(pockaj);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <main+0x78>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffc2 	bl	8001568 <Delay>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 80015e4:	2120      	movs	r1, #32
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <main+0x7c>)
 80015e8:	f7ff f9ba 	bl	8000960 <GPIO_ToggleBits>

  }
 80015ec:	e7df      	b.n	80015ae <main+0x26>
 80015ee:	bf00      	nop
 80015f0:	08001b90 	.word	0x08001b90
 80015f4:	20000000 	.word	0x20000000
 80015f8:	40012400 	.word	0x40012400
 80015fc:	2000003c 	.word	0x2000003c
 8001600:	20000038 	.word	0x20000038
 8001604:	40020000 	.word	0x40020000

08001608 <gpio_init>:


volatile uint16_t predstih = 0xfff;

/************************************ inicializuj GPIO ******************/
void gpio_init(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800160e:	2101      	movs	r1, #1
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fa2f 	bl	8000a74 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001616:	2101      	movs	r1, #1
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff fa0d 	bl	8000a38 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 800161e:	2302      	movs	r3, #2
 8001620:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin 	= TIM_IC_Pin;
 8001626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
 800162c:	2300      	movs	r3, #0
 800162e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed	= GPIO_Speed_10MHz;
 8001630:	2302      	movs	r3, #2
 8001632:	717b      	strb	r3, [r7, #5]

	GPIO_Init(TIM_IC_Port, &GPIO_InitStructure);
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <gpio_init+0x90>)
 800163a:	f7ff f8df 	bl	80007fc <GPIO_Init>
	GPIO_PinAFConfig(TIM_IC_Port, GPIO_PinSource15, GPIO_AF_TIM2);
 800163e:	2201      	movs	r2, #1
 8001640:	210f      	movs	r1, #15
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <gpio_init+0x90>)
 8001644:	f7ff f9a0 	bl	8000988 <GPIO_PinAFConfig>


	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8001648:	2302      	movs	r3, #2
 800164a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin 	= TIM_OC_Pin;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
 8001654:	2300      	movs	r3, #0
 8001656:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed	= GPIO_Speed_10MHz;
 8001658:	2302      	movs	r3, #2
 800165a:	717b      	strb	r3, [r7, #5]

	GPIO_Init(TIM_OC_Port, &GPIO_InitStructure);
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <gpio_init+0x90>)
 8001662:	f7ff f8cb 	bl	80007fc <GPIO_Init>
	GPIO_PinAFConfig(TIM_OC_Port, GPIO_PinSource6, GPIO_AF_TIM3);
 8001666:	2202      	movs	r2, #2
 8001668:	2106      	movs	r1, #6
 800166a:	480b      	ldr	r0, [pc, #44]	; (8001698 <gpio_init+0x90>)
 800166c:	f7ff f98c 	bl	8000988 <GPIO_PinAFConfig>


	GPIO_InitStructure.GPIO_Pin 	= PLYN_Sense_Pin;
 8001670:	2301      	movs	r3, #1
 8001672:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AN;
 8001674:	2303      	movs	r3, #3
 8001676:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed	= GPIO_Speed_10MHz;
 800167c:	2302      	movs	r3, #2
 800167e:	717b      	strb	r3, [r7, #5]

	GPIO_Init(PLYN_Sense_Port, &GPIO_InitStructure);
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <gpio_init+0x90>)
 8001686:	f7ff f8b9 	bl	80007fc <GPIO_Init>

	RCC_HSICmd(ENABLE);
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff f9c4 	bl	8000a18 <RCC_HSICmd>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40020000 	.word	0x40020000

0800169c <adc_init>:

/************************************ inicializuj ADC *******************/
void adc_init(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0

	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80016a2:	2101      	movs	r1, #1
 80016a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016a8:	f7ff f9e4 	bl	8000a74 <RCC_APB2PeriphClockCmd>

	 ADC_InitTypeDef	ADC_InitStructure;

	 ADC_InitStructure.ADC_Resolution 				= ADC_Resolution_12b;
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
	 ADC_InitStructure.ADC_ContinuousConvMode 		= DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	717b      	strb	r3, [r7, #5]
	 ADC_InitStructure.ADC_ExternalTrigConvEdge 	= ADC_ExternalTrigConvEdge_None;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
	 ADC_InitStructure.ADC_DataAlign 				= ADC_DataAlign_Right;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
	 ADC_InitStructure.ADC_NbrOfConversion 			= 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	753b      	strb	r3, [r7, #20]

	 ADC_Init(ADC1, &ADC_InitStructure);
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <adc_init+0x5c>)
 80016c6:	f7fe fdcb 	bl	8000260 <ADC_Init>

	 ADC_RegularChannelConfig(ADC1, PLYN_Sense_Chan, 1, ADC_SampleTime_384Cycles);
 80016ca:	2307      	movs	r3, #7
 80016cc:	2201      	movs	r2, #1
 80016ce:	2100      	movs	r1, #0
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <adc_init+0x5c>)
 80016d2:	f7fe fe35 	bl	8000340 <ADC_RegularChannelConfig>

	 /* Enable the ADC */
	 ADC_Cmd(ADC1, ENABLE);
 80016d6:	2101      	movs	r1, #1
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <adc_init+0x5c>)
 80016da:	f7fe fe15 	bl	8000308 <ADC_Cmd>

	 /* Wait until the ADC1 is ready */
	 while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET);
 80016de:	bf00      	nop
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <adc_init+0x5c>)
 80016e4:	f7fe ffd6 	bl	8000694 <ADC_GetFlagStatus>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f8      	beq.n	80016e0 <adc_init+0x44>

}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40012400 	.word	0x40012400

080016fc <nvic_init>:

/************************************ inicializuj NVIC ******************/
void nvic_init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001702:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001706:	f7fe fd39 	bl	800017c <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef 	NVIC_InitStructure;
	EXTI_InitTypeDef 	EXTI_InitStructure;


	NVIC_InitStructure.NVIC_IRQChannel 						= EXTI0_IRQn;
 800170a:	2306      	movs	r3, #6
 800170c:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 1;
 800170e:	2301      	movs	r3, #1
 8001710:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority 			= 0;
 8001712:	2300      	movs	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd 					= ENABLE;
 8001716:	2301      	movs	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fd3e 	bl	80001a0 <NVIC_Init>


	NVIC_InitStructure.NVIC_IRQChannel 						= TIM2_IRQn;
 8001724:	231c      	movs	r3, #28
 8001726:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 2;
 8001728:	2302      	movs	r3, #2
 800172a:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority 			= 0;
 800172c:	2300      	movs	r3, #0
 800172e:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd 					= ENABLE;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fd31 	bl	80001a0 <NVIC_Init>


	EXTI_InitStructure.EXTI_Line		= DU_interrup;
 800173e:	2301      	movs	r3, #1
 8001740:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode		= EXTI_Mode_Interrupt;
 8001742:	2300      	movs	r3, #0
 8001744:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger		= EXTI_Trigger_Falling;
 8001746:	230c      	movs	r3, #12
 8001748:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd		= ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	72bb      	strb	r3, [r7, #10]
	SYSCFG_EXTILineConfig(DU_Sense_Port, DU_Sense_Pin);
 800174e:	2100      	movs	r1, #0
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff f9cb 	bl	8000aec <SYSCFG_EXTILineConfig>

	EXTI_Init(&EXTI_InitStructure);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe ffb5 	bl	80006c8 <EXTI_Init>


	NVIC_InitStructure.NVIC_IRQChannel 						= ADC1_IRQn;
 800175e:	2312      	movs	r3, #18
 8001760:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority 	= 3;
 8001762:	2303      	movs	r3, #3
 8001764:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority 			= 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd 					= ENABLE;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]

	NVIC_Init(&NVIC_InitStructure);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fd14 	bl	80001a0 <NVIC_Init>

	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8001778:	2201      	movs	r2, #1
 800177a:	f240 2105 	movw	r1, #517	; 0x205
 800177e:	4809      	ldr	r0, [pc, #36]	; (80017a4 <nvic_init+0xa8>)
 8001780:	f7fe ff60 	bl	8000644 <ADC_ITConfig>
	TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 8001784:	2102      	movs	r1, #2
 8001786:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800178a:	f7ff fbbd 	bl	8000f08 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 800178e:	2201      	movs	r2, #1
 8001790:	2102      	movs	r1, #2
 8001792:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001796:	f7ff fb67 	bl	8000e68 <TIM_ITConfig>

}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40012400 	.word	0x40012400

080017a8 <timer_init>:

/************************************ inicializuj TIMER *****************/
void timer_init(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0

	RCC_APB1PeriphClockCmd(RCC_APB1ENR_TIM2EN, ENABLE);
 80017ae:	2101      	movs	r1, #1
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff f97d 	bl	8000ab0 <RCC_APB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1ENR_TIM3EN, ENABLE);
 80017b6:	2101      	movs	r1, #1
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7ff f979 	bl	8000ab0 <RCC_APB1PeriphClockCmd>
	TIM_OCInitTypeDef 			TIM_OC_InitStructure;
	TIM_ICInitTypeDef 			TIM_IC_InitStructure;

	/**************************TIM3 riadni zapalovanie v OutputCompare mode*******************/

	TIM_InitStructure.TIM_Prescaler 		= TIM_prescal;
 80017be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017c2:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_Period 			= predstih;
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <timer_init+0xb8>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	623b      	str	r3, [r7, #32]
	TIM_InitStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 80017cc:	2300      	movs	r3, #0
 80017ce:	83fb      	strh	r3, [r7, #30]
	TIM_InitStructure.TIM_ClockDivision 	= 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	84bb      	strh	r3, [r7, #36]	; 0x24

	TIM_TimeBaseInit(TIM3, &TIM_InitStructure);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4822      	ldr	r0, [pc, #136]	; (8001864 <timer_init+0xbc>)
 80017dc:	f7ff f9c8 	bl	8000b70 <TIM_TimeBaseInit>

	TIM_OC_InitStructure.TIM_OCMode 		= TIM_OCMode_Active;
 80017e0:	2310      	movs	r3, #16
 80017e2:	823b      	strh	r3, [r7, #16]
	TIM_OC_InitStructure.TIM_OCPolarity 	= TIM_OCPolarity_Low;
 80017e4:	2302      	movs	r3, #2
 80017e6:	833b      	strh	r3, [r7, #24]
	TIM_OC_InitStructure.TIM_OutputState 	= TIM_OutputState_Enable;
 80017e8:	2301      	movs	r3, #1
 80017ea:	827b      	strh	r3, [r7, #18]
	TIM_OC_InitStructure.TIM_Pulse 			= predstih;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <timer_init+0xb8>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	617b      	str	r3, [r7, #20]

	TIM_OC1Init(TIM3, &TIM_OC_InitStructure);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	481a      	ldr	r0, [pc, #104]	; (8001864 <timer_init+0xbc>)
 80017fc:	f7ff fa2a 	bl	8000c54 <TIM_OC1Init>

	/****************************TIM2 pocita otacky v InputCapture mode************************/

	TIM_InitStructure.TIM_Prescaler 		= TIM_prescal;
 8001800:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001804:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_Period 			= 0xffff;
 8001806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180a:	623b      	str	r3, [r7, #32]
	TIM_InitStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 800180c:	2300      	movs	r3, #0
 800180e:	83fb      	strh	r3, [r7, #30]
	TIM_InitStructure.TIM_ClockDivision 	= 0;
 8001810:	2300      	movs	r3, #0
 8001812:	84bb      	strh	r3, [r7, #36]	; 0x24

	TIM_TimeBaseInit(TIM2, &TIM_InitStructure);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800181e:	f7ff f9a7 	bl	8000b70 <TIM_TimeBaseInit>

	TIM_IC_InitStructure.TIM_Channel 		= TIM_Channel_1;
 8001822:	2300      	movs	r3, #0
 8001824:	80bb      	strh	r3, [r7, #4]
	TIM_IC_InitStructure.TIM_ICPolarity 	= TIM_ICPolarity_Rising;
 8001826:	2300      	movs	r3, #0
 8001828:	80fb      	strh	r3, [r7, #6]
	TIM_IC_InitStructure.TIM_ICPrescaler 	= 320;
 800182a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800182e:	817b      	strh	r3, [r7, #10]
	TIM_IC_InitStructure.TIM_ICFilter 		= 0x0;
 8001830:	2300      	movs	r3, #0
 8001832:	81bb      	strh	r3, [r7, #12]
	TIM_IC_InitStructure.TIM_ICSelection 	= TIM_ICSelection_DirectTI;
 8001834:	2301      	movs	r3, #1
 8001836:	813b      	strh	r3, [r7, #8]

	TIM_ICInit(TIM2, &TIM_IC_InitStructure);
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001840:	f7ff fa4a 	bl	8000cd8 <TIM_ICInit>

	TIM_Cmd(TIM2, ENABLE);
 8001844:	2101      	movs	r1, #1
 8001846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800184a:	f7ff f9e3 	bl	8000c14 <TIM_Cmd>
	TIM_Cmd(TIM3, ENABLE);
 800184e:	2101      	movs	r1, #1
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <timer_init+0xbc>)
 8001852:	f7ff f9df 	bl	8000c14 <TIM_Cmd>

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000002 	.word	0x20000002
 8001864:	40000400 	.word	0x40000400

08001868 <ADC1_IRQHandler>:
#include "hd44780.h"

extern uint16_t rpm, AD_value;

/************************************ odcitanie hodnoty z ADC ***********/
void ADC1_IRQHandler (void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

	if (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){				//ak prerusenie vyvolalo EOC
 800186c:	2102      	movs	r1, #2
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <ADC1_IRQHandler+0x24>)
 8001870:	f7fe ff10 	bl	8000694 <ADC_GetFlagStatus>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <ADC1_IRQHandler+0x20>
		AD_value = ADC_GetConversionValue(ADC1);			//citanie vysledku prevodu
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <ADC1_IRQHandler+0x24>)
 800187c:	f7fe fed6 	bl	800062c <ADC_GetConversionValue>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <ADC1_IRQHandler+0x28>)
 8001886:	801a      	strh	r2, [r3, #0]

	}
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40012400 	.word	0x40012400
 8001890:	2000003c 	.word	0x2000003c

08001894 <EXTI0_IRQHandler>:

/************************************ DOLNA UVRAT ***********************/
void EXTI0_IRQHandler(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

	if (EXTI_GetFlagStatus(DU_interrup)) {
 8001898:	2001      	movs	r0, #1
 800189a:	f7fe ff87 	bl	80007ac <EXTI_GetFlagStatus>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <EXTI0_IRQHandler+0x22>
		EXTI_ClearFlag(DU_interrup);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7fe ff9b 	bl	80007e0 <EXTI_ClearFlag>
		/*TIM_Cmd(TIM2, ENABLE);
		TIM_Cmd(TIM3, ENABLE);*/

		rpm++;
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <EXTI0_IRQHandler+0x28>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b02      	ldr	r3, [pc, #8]	; (80018bc <EXTI0_IRQHandler+0x28>)
 80018b4:	801a      	strh	r2, [r3, #0]
	}
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000

080018c0 <TIM2_IRQHandler>:

/************************************ HORNA UVRAT ***********************/
void TIM2_IRQHandler(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

	if (TIM_GetFlagStatus(TIM2, TIM_FLAG_CC1)) {
 80018c4:	2102      	movs	r1, #2
 80018c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ca:	f7ff faf1 	bl	8000eb0 <TIM_GetFlagStatus>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00a      	beq.n	80018ea <TIM2_IRQHandler+0x2a>
		TIM_ClearFlag(TIM2, TIM_FLAG_CC1);
 80018d4:	2102      	movs	r1, #2
 80018d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018da:	f7ff fb05 	bl	8000ee8 <TIM_ClearFlag>

		rpm++;
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <TIM2_IRQHandler+0x30>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <TIM2_IRQHandler+0x30>)
 80018e8:	801a      	strh	r2, [r3, #0]

		/*rpm = 3000000/TIM_GetCapture1(TIM2);
		TIM_Cmd(TIM2, DISABLE);
		TIM_Cmd(TIM3, DISABLE);*/
	}
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000000 	.word	0x20000000

080018f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018fa:	e003      	b.n	8001904 <LoopCopyDataInit>

080018fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80018fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001900:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001902:	3104      	adds	r1, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001908:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800190a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800190c:	d3f6      	bcc.n	80018fc <CopyDataInit>
  ldr r2, =_sbss
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001910:	e002      	b.n	8001918 <LoopFillZerobss>

08001912 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001914:	f842 3b04 	str.w	r3, [r2], #4

08001918 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800191a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800191c:	d3f9      	bcc.n	8001912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191e:	f000 f841 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f000 f903 	bl	8001b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001926:	f7ff fe2f 	bl	8001588 <main>
  bx lr
 800192a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800192c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001930:	08001ba4 	.word	0x08001ba4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001938:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800193c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001940:	20000040 	.word	0x20000040

08001944 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <AES_IRQHandler>
	...

08001948 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001958:	e7fe      	b.n	8001958 <HardFault_Handler+0x4>
 800195a:	bf00      	nop

0800195c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>
 8001962:	bf00      	nop

08001964 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001968:	e7fe      	b.n	8001968 <BusFault_Handler+0x4>
 800196a:	bf00      	nop

0800196c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001970:	e7fe      	b.n	8001970 <UsageFault_Handler+0x4>
 8001972:	bf00      	nop

08001974 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80019a8:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <SystemInit+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <SystemInit+0x5c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80019b4:	4912      	ldr	r1, [pc, #72]	; (8001a00 <SystemInit+0x5c>)
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <SystemInit+0x5c>)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <SystemInit+0x60>)
 80019bc:	4013      	ands	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80019c0:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <SystemInit+0x5c>)
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <SystemInit+0x5c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80019ca:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80019ce:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <SystemInit+0x5c>)
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <SystemInit+0x5c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <SystemInit+0x5c>)
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <SystemInit+0x5c>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80019e6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SystemInit+0x5c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80019ee:	f000 f80d 	bl	8001a0c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SystemInit+0x64>)
 80019f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019f8:	609a      	str	r2, [r3, #8]
#endif
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	88ffc00c 	.word	0x88ffc00c
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a1a:	4a41      	ldr	r2, [pc, #260]	; (8001b20 <SetSysClock+0x114>)
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <SetSysClock+0x114>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001a26:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <SetSysClock+0x114>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3301      	adds	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d103      	bne.n	8001a44 <SetSysClock+0x38>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a42:	d1f0      	bne.n	8001a26 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001a44:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <SetSysClock+0x114>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001a50:	2301      	movs	r3, #1
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	e001      	b.n	8001a5a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d15a      	bne.n	8001b16 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001a60:	4a30      	ldr	r2, [pc, #192]	; (8001b24 <SetSysClock+0x118>)
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <SetSysClock+0x118>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <SetSysClock+0x118>)
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <SetSysClock+0x118>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <SetSysClock+0x118>)
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <SetSysClock+0x118>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a84:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <SetSysClock+0x114>)
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <SetSysClock+0x114>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <SetSysClock+0x11c>)
 8001a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a96:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001a98:	bf00      	nop
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <SetSysClock+0x11c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <SetSysClock+0x114>)
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <SetSysClock+0x114>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <SetSysClock+0x114>)
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <SetSysClock+0x114>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001ab6:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <SetSysClock+0x114>)
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <SetSysClock+0x114>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <SetSysClock+0x114>)
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <SetSysClock+0x114>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001ac8:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <SetSysClock+0x114>)
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <SetSysClock+0x114>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001ad4:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <SetSysClock+0x114>)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <SetSysClock+0x114>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ae2:	bf00      	nop
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <SetSysClock+0x114>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f9      	beq.n	8001ae4 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <SetSysClock+0x114>)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <SetSysClock+0x114>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001afc:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <SetSysClock+0x114>)
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <SetSysClock+0x114>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f043 0303 	orr.w	r3, r3, #3
 8001b06:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001b08:	bf00      	nop
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SetSysClock+0x114>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d1f9      	bne.n	8001b0a <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40023c00 	.word	0x40023c00
 8001b28:	40007000 	.word	0x40007000

08001b2c <__libc_init_array>:
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <__libc_init_array+0x3c>)
 8001b2e:	b570      	push	{r4, r5, r6, lr}
 8001b30:	461e      	mov	r6, r3
 8001b32:	4c0e      	ldr	r4, [pc, #56]	; (8001b6c <__libc_init_array+0x40>)
 8001b34:	2500      	movs	r5, #0
 8001b36:	1ae4      	subs	r4, r4, r3
 8001b38:	10a4      	asrs	r4, r4, #2
 8001b3a:	42a5      	cmp	r5, r4
 8001b3c:	d004      	beq.n	8001b48 <__libc_init_array+0x1c>
 8001b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b42:	4798      	blx	r3
 8001b44:	3501      	adds	r5, #1
 8001b46:	e7f8      	b.n	8001b3a <__libc_init_array+0xe>
 8001b48:	f000 f816 	bl	8001b78 <_init>
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <__libc_init_array+0x44>)
 8001b4e:	4c09      	ldr	r4, [pc, #36]	; (8001b74 <__libc_init_array+0x48>)
 8001b50:	461e      	mov	r6, r3
 8001b52:	1ae4      	subs	r4, r4, r3
 8001b54:	10a4      	asrs	r4, r4, #2
 8001b56:	2500      	movs	r5, #0
 8001b58:	42a5      	cmp	r5, r4
 8001b5a:	d004      	beq.n	8001b66 <__libc_init_array+0x3a>
 8001b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b60:	4798      	blx	r3
 8001b62:	3501      	adds	r5, #1
 8001b64:	e7f8      	b.n	8001b58 <__libc_init_array+0x2c>
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
 8001b68:	08001b9c 	.word	0x08001b9c
 8001b6c:	08001b9c 	.word	0x08001b9c
 8001b70:	08001b9c 	.word	0x08001b9c
 8001b74:	08001ba0 	.word	0x08001ba0

08001b78 <_init>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	bf00      	nop
 8001b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7e:	bc08      	pop	{r3}
 8001b80:	469e      	mov	lr, r3
 8001b82:	4770      	bx	lr

08001b84 <_fini>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	bf00      	nop
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr
