
semestralny_projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009fc  080009fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000000  08000a10  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000034  08000a10  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001e21  00000000  00000000  00010a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000007a8  00000000  00000000  0001285a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000340  00000000  00000000  00013008  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00013348  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001135  00000000  00000000  00013620  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000cb3  00000000  00000000  00014755  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00015408  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000c30  00000000  00000000  00015488  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000160b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	080009e4 	.word	0x080009e4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	080009e4 	.word	0x080009e4

0800017c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b087      	sub	sp, #28
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000186:	2300      	movs	r3, #0
 8000188:	617b      	str	r3, [r7, #20]
 800018a:	2300      	movs	r3, #0
 800018c:	613b      	str	r3, [r7, #16]
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000192:	2300      	movs	r3, #0
 8000194:	617b      	str	r3, [r7, #20]
 8000196:	e07e      	b.n	8000296 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000198:	2201      	movs	r2, #1
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	fa02 f303 	lsl.w	r3, r2, r3
 80001a0:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	693b      	ldr	r3, [r7, #16]
 80001a8:	4013      	ands	r3, r2
 80001aa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d16d      	bne.n	8000290 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	2103      	movs	r1, #3
 80001be:	fa01 f303 	lsl.w	r3, r1, r3
 80001c2:	43db      	mvns	r3, r3
 80001c4:	401a      	ands	r2, r3
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	791b      	ldrb	r3, [r3, #4]
 80001d2:	4619      	mov	r1, r3
 80001d4:	697b      	ldr	r3, [r7, #20]
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	fa01 f303 	lsl.w	r3, r1, r3
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	791b      	ldrb	r3, [r3, #4]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d003      	beq.n	80001f2 <GPIO_Init+0x76>
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	791b      	ldrb	r3, [r3, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d136      	bne.n	8000260 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	689a      	ldr	r2, [r3, #8]
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	2103      	movs	r1, #3
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	43db      	mvns	r3, r3
 8000202:	401a      	ands	r2, r3
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	689a      	ldr	r2, [r3, #8]
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	795b      	ldrb	r3, [r3, #5]
 8000210:	4619      	mov	r1, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	fa01 f303 	lsl.w	r3, r1, r3
 800021a:	431a      	orrs	r2, r3
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	889b      	ldrh	r3, [r3, #4]
 8000224:	b29a      	uxth	r2, r3
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	b29b      	uxth	r3, r3
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	b29b      	uxth	r3, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	b29b      	uxth	r3, r3
 8000236:	4013      	ands	r3, r2
 8000238:	b29a      	uxth	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	889b      	ldrh	r3, [r3, #4]
 8000242:	b29b      	uxth	r3, r3
 8000244:	b21a      	sxth	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	799b      	ldrb	r3, [r3, #6]
 800024a:	4619      	mov	r1, r3
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	b29b      	uxth	r3, r3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21b      	sxth	r3, r3
 800025a:	b29a      	uxth	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	68da      	ldr	r2, [r3, #12]
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	b29b      	uxth	r3, r3
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	68da      	ldr	r2, [r3, #12]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	79db      	ldrb	r3, [r3, #7]
 8000280:	4619      	mov	r1, r3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	3301      	adds	r3, #1
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	2b0f      	cmp	r3, #15
 800029a:	f67f af7d 	bls.w	8000198 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800029e:	bf00      	nop
 80002a0:	371c      	adds	r7, #28
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	887a      	ldrh	r2, [r7, #2]
 80002b8:	831a      	strh	r2, [r3, #24]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	887a      	ldrh	r2, [r7, #2]
 80002d4:	835a      	strh	r2, [r3, #26]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80002ec:	78fb      	ldrb	r3, [r7, #3]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d006      	beq.n	8000300 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80002f2:	4909      	ldr	r1, [pc, #36]	; (8000318 <RCC_AHBPeriphClockCmd+0x38>)
 80002f4:	4b08      	ldr	r3, [pc, #32]	; (8000318 <RCC_AHBPeriphClockCmd+0x38>)
 80002f6:	69da      	ldr	r2, [r3, #28]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4313      	orrs	r3, r2
 80002fc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80002fe:	e006      	b.n	800030e <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000300:	4905      	ldr	r1, [pc, #20]	; (8000318 <RCC_AHBPeriphClockCmd+0x38>)
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <RCC_AHBPeriphClockCmd+0x38>)
 8000304:	69da      	ldr	r2, [r3, #28]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	43db      	mvns	r3, r3
 800030a:	4013      	ands	r3, r2
 800030c:	61cb      	str	r3, [r1, #28]
  }
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40023800 	.word	0x40023800

0800031c <lcdInit>:
void strobeEN(void);
void upNib(uint8_t c);
void downNib(uint8_t c);
void Delay(uint32_t nCount);

void lcdInit(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);						//GPIOA clock enable
 8000322:	2101      	movs	r1, #1
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ffdb 	bl	80002e0 <RCC_AHBPeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;									//GPIOA initialization
	GPIO_InitStructure.GPIO_Pin   = EN | RS | D4 | D5 | D6 | D7; 
 800032a:	23f3      	movs	r3, #243	; 0xf3
 800032c:	603b      	str	r3, [r7, #0]
	GPIO_ResetBits(LCD_Port, EN | RS | D4 | D5 | D6 | D7);
 800032e:	21f3      	movs	r1, #243	; 0xf3
 8000330:	4817      	ldr	r0, [pc, #92]	; (8000390 <lcdInit+0x74>)
 8000332:	f7ff ffc7 	bl	80002c4 <GPIO_ResetBits>
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
 8000336:	2301      	movs	r3, #1
 8000338:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800033a:	2300      	movs	r3, #0
 800033c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800033e:	2302      	movs	r3, #2
 8000340:	717b      	strb	r3, [r7, #5]
	GPIO_Init(LCD_Port, &GPIO_InitStructure);
 8000342:	463b      	mov	r3, r7
 8000344:	4619      	mov	r1, r3
 8000346:	4812      	ldr	r0, [pc, #72]	; (8000390 <lcdInit+0x74>)
 8000348:	f7ff ff18 	bl	800017c <GPIO_Init>

	GPIO_ResetBits(LCD_Port, EN | RS | D4 | D5 | D6 | D7);
 800034c:	21f3      	movs	r1, #243	; 0xf3
 800034e:	4810      	ldr	r0, [pc, #64]	; (8000390 <lcdInit+0x74>)
 8000350:	f7ff ffb8 	bl	80002c4 <GPIO_ResetBits>
	Delay(0xffff);
 8000354:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000358:	f000 f9cc 	bl	80006f4 <Delay>
	sendCMD(0x02);
 800035c:	2002      	movs	r0, #2
 800035e:	f000 f8b7 	bl	80004d0 <sendCMD>
	Delay(0x3FFFC);  //wait 20ms
 8000362:	480c      	ldr	r0, [pc, #48]	; (8000394 <lcdInit+0x78>)
 8000364:	f000 f9c6 	bl	80006f4 <Delay>
	sendCMD(0x28);  //LCD configs
 8000368:	2028      	movs	r0, #40	; 0x28
 800036a:	f000 f8b1 	bl	80004d0 <sendCMD>
	sendCMD(0x06);
 800036e:	2006      	movs	r0, #6
 8000370:	f000 f8ae 	bl	80004d0 <sendCMD>
	sendCMD(0x01);
 8000374:	2001      	movs	r0, #1
 8000376:	f000 f8ab 	bl	80004d0 <sendCMD>
	sendCMD(0x0E);
 800037a:	200e      	movs	r0, #14
 800037c:	f000 f8a8 	bl	80004d0 <sendCMD>
	Delay(0xffff);
 8000380:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000384:	f000 f9b6 	bl	80006f4 <Delay>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40020000 	.word	0x40020000
 8000394:	0003fffc 	.word	0x0003fffc

08000398 <strobeEN>:

void strobeEN(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	Delay(0x3ff);
 800039c:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80003a0:	f000 f9a8 	bl	80006f4 <Delay>
	GPIO_SetBits(LCD_Port, EN);
 80003a4:	2102      	movs	r1, #2
 80003a6:	4806      	ldr	r0, [pc, #24]	; (80003c0 <strobeEN+0x28>)
 80003a8:	f7ff ff7e 	bl	80002a8 <GPIO_SetBits>
	Delay(0x3ff);
 80003ac:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80003b0:	f000 f9a0 	bl	80006f4 <Delay>
	GPIO_ResetBits(LCD_Port, EN);
 80003b4:	2102      	movs	r1, #2
 80003b6:	4802      	ldr	r0, [pc, #8]	; (80003c0 <strobeEN+0x28>)
 80003b8:	f7ff ff84 	bl	80002c4 <GPIO_ResetBits>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40020000 	.word	0x40020000

080003c4 <upNib>:

void upNib(uint8_t c) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	if(c & 0x80)
 80003ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	da04      	bge.n	80003e0 <upNib+0x1c>
		GPIO_SetBits(LCD_Port, D7);
 80003d6:	2120      	movs	r1, #32
 80003d8:	481a      	ldr	r0, [pc, #104]	; (8000444 <upNib+0x80>)
 80003da:	f7ff ff65 	bl	80002a8 <GPIO_SetBits>
 80003de:	e003      	b.n	80003e8 <upNib+0x24>
	else
		GPIO_ResetBits(LCD_Port, D7);
 80003e0:	2120      	movs	r1, #32
 80003e2:	4818      	ldr	r0, [pc, #96]	; (8000444 <upNib+0x80>)
 80003e4:	f7ff ff6e 	bl	80002c4 <GPIO_ResetBits>
	if(c & 0x40)
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d004      	beq.n	80003fc <upNib+0x38>
		GPIO_SetBits(LCD_Port, D6);
 80003f2:	2110      	movs	r1, #16
 80003f4:	4813      	ldr	r0, [pc, #76]	; (8000444 <upNib+0x80>)
 80003f6:	f7ff ff57 	bl	80002a8 <GPIO_SetBits>
 80003fa:	e003      	b.n	8000404 <upNib+0x40>
	else
		GPIO_ResetBits(LCD_Port, D6);
 80003fc:	2110      	movs	r1, #16
 80003fe:	4811      	ldr	r0, [pc, #68]	; (8000444 <upNib+0x80>)
 8000400:	f7ff ff60 	bl	80002c4 <GPIO_ResetBits>
	if(c & 0x20)
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	f003 0320 	and.w	r3, r3, #32
 800040a:	2b00      	cmp	r3, #0
 800040c:	d004      	beq.n	8000418 <upNib+0x54>
		GPIO_SetBits(LCD_Port, D5);
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <upNib+0x80>)
 8000412:	f7ff ff49 	bl	80002a8 <GPIO_SetBits>
 8000416:	e003      	b.n	8000420 <upNib+0x5c>
	else
		GPIO_ResetBits(LCD_Port, D5);
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	480a      	ldr	r0, [pc, #40]	; (8000444 <upNib+0x80>)
 800041c:	f7ff ff52 	bl	80002c4 <GPIO_ResetBits>
	if(c & 0x10)
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	f003 0310 	and.w	r3, r3, #16
 8000426:	2b00      	cmp	r3, #0
 8000428:	d004      	beq.n	8000434 <upNib+0x70>
		GPIO_SetBits(LCD_Port, D4);
 800042a:	2140      	movs	r1, #64	; 0x40
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <upNib+0x80>)
 800042e:	f7ff ff3b 	bl	80002a8 <GPIO_SetBits>
	else
		GPIO_ResetBits(LCD_Port, D4);
}
 8000432:	e003      	b.n	800043c <upNib+0x78>
	else
		GPIO_ResetBits(LCD_Port, D5);
	if(c & 0x10)
		GPIO_SetBits(LCD_Port, D4);
	else
		GPIO_ResetBits(LCD_Port, D4);
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	4803      	ldr	r0, [pc, #12]	; (8000444 <upNib+0x80>)
 8000438:	f7ff ff44 	bl	80002c4 <GPIO_ResetBits>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40020000 	.word	0x40020000

08000448 <downNib>:

void downNib(uint8_t c) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
	if(c & 0x8)
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	2b00      	cmp	r3, #0
 800045a:	d004      	beq.n	8000466 <downNib+0x1e>
		GPIO_SetBits(LCD_Port, D7);
 800045c:	2120      	movs	r1, #32
 800045e:	481b      	ldr	r0, [pc, #108]	; (80004cc <downNib+0x84>)
 8000460:	f7ff ff22 	bl	80002a8 <GPIO_SetBits>
 8000464:	e003      	b.n	800046e <downNib+0x26>
	else
		GPIO_ResetBits(LCD_Port, D7);
 8000466:	2120      	movs	r1, #32
 8000468:	4818      	ldr	r0, [pc, #96]	; (80004cc <downNib+0x84>)
 800046a:	f7ff ff2b 	bl	80002c4 <GPIO_ResetBits>
	if(c & 0x4)
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	2b00      	cmp	r3, #0
 8000476:	d004      	beq.n	8000482 <downNib+0x3a>
		GPIO_SetBits(LCD_Port, D6);
 8000478:	2110      	movs	r1, #16
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <downNib+0x84>)
 800047c:	f7ff ff14 	bl	80002a8 <GPIO_SetBits>
 8000480:	e003      	b.n	800048a <downNib+0x42>
	else
		GPIO_ResetBits(LCD_Port, D6);
 8000482:	2110      	movs	r1, #16
 8000484:	4811      	ldr	r0, [pc, #68]	; (80004cc <downNib+0x84>)
 8000486:	f7ff ff1d 	bl	80002c4 <GPIO_ResetBits>
	if(c & 0x2)
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	2b00      	cmp	r3, #0
 8000492:	d004      	beq.n	800049e <downNib+0x56>
		GPIO_SetBits(LCD_Port, D5);
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <downNib+0x84>)
 8000498:	f7ff ff06 	bl	80002a8 <GPIO_SetBits>
 800049c:	e003      	b.n	80004a6 <downNib+0x5e>
	else
		GPIO_ResetBits(LCD_Port, D5);
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	480a      	ldr	r0, [pc, #40]	; (80004cc <downNib+0x84>)
 80004a2:	f7ff ff0f 	bl	80002c4 <GPIO_ResetBits>
	if(c & 0x1)
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d004      	beq.n	80004ba <downNib+0x72>
		GPIO_SetBits(LCD_Port, D4);
 80004b0:	2140      	movs	r1, #64	; 0x40
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <downNib+0x84>)
 80004b4:	f7ff fef8 	bl	80002a8 <GPIO_SetBits>
	else
		GPIO_ResetBits(LCD_Port, D4);
}
 80004b8:	e003      	b.n	80004c2 <downNib+0x7a>
	else
		GPIO_ResetBits(LCD_Port, D5);
	if(c & 0x1)
		GPIO_SetBits(LCD_Port, D4);
	else
		GPIO_ResetBits(LCD_Port, D4);
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <downNib+0x84>)
 80004be:	f7ff ff01 	bl	80002c4 <GPIO_ResetBits>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020000 	.word	0x40020000

080004d0 <sendCMD>:

void sendCMD(uint8_t c) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(LCD_Port, RS);
 80004da:	2101      	movs	r1, #1
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <sendCMD+0x34>)
 80004de:	f7ff fef1 	bl	80002c4 <GPIO_ResetBits>
	upNib(c);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff6d 	bl	80003c4 <upNib>
	strobeEN();
 80004ea:	f7ff ff55 	bl	8000398 <strobeEN>
	downNib(c);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ffa9 	bl	8000448 <downNib>
	strobeEN();
 80004f6:	f7ff ff4f 	bl	8000398 <strobeEN>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020000 	.word	0x40020000

08000508 <printChar>:

void printChar(uint8_t c) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	if(((c>=0x20)&&(c<=0x7F)) || ((c>=0xA0)&&(c<=0xFF))) {	//check if 'c' is within display boundry
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b1f      	cmp	r3, #31
 8000516:	d903      	bls.n	8000520 <printChar+0x18>
 8000518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051c:	2b00      	cmp	r3, #0
 800051e:	da02      	bge.n	8000526 <printChar+0x1e>
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b9f      	cmp	r3, #159	; 0x9f
 8000524:	d913      	bls.n	800054e <printChar+0x46>
		GPIO_SetBits(LCD_Port, RS);
 8000526:	2101      	movs	r1, #1
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <printChar+0x50>)
 800052a:	f7ff febd 	bl	80002a8 <GPIO_SetBits>
		upNib(c);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff47 	bl	80003c4 <upNib>
		strobeEN();
 8000536:	f7ff ff2f 	bl	8000398 <strobeEN>
		downNib(c);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ff83 	bl	8000448 <downNib>
		strobeEN();
 8000542:	f7ff ff29 	bl	8000398 <strobeEN>
		GPIO_ResetBits(LCD_Port, RS);
 8000546:	2101      	movs	r1, #1
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <printChar+0x50>)
 800054a:	f7ff febb 	bl	80002c4 <GPIO_ResetBits>
	}
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020000 	.word	0x40020000

0800055c <printString>:

void printString(uint8_t *s) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
	//while (s[i] == '\0') i++;
	while(s[i] != '\0') {
 8000568:	e009      	b.n	800057e <printString+0x22>
		printChar(s[i]);
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffc8 	bl	8000508 <printChar>
		i++;
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	3301      	adds	r3, #1
 800057c:	73fb      	strb	r3, [r7, #15]
}

void printString(uint8_t *s) {
	uint8_t i=0;
	//while (s[i] == '\0') i++;
	while(s[i] != '\0') {
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1ef      	bne.n	800056a <printString+0xe>
		printChar(s[i]);
		i++;
	}
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop

08000594 <clearLCD>:

void clearLCD(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	sendCMD(0x01);
 8000598:	2001      	movs	r0, #1
 800059a:	f7ff ff99 	bl	80004d0 <sendCMD>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop

080005a4 <cursoroff>:
}

void toLine2(void) {
	sendCMD(0xC0);
}
void cursoroff(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	sendCMD(0x0C);
 80005a8:	200c      	movs	r0, #12
 80005aa:	f7ff ff91 	bl	80004d0 <sendCMD>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop

080005b4 <cursorpos>:
void cursorpos(int col, int row){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	if (row == 1) col += 0x7f;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d102      	bne.n	80005ca <cursorpos+0x16>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	337f      	adds	r3, #127	; 0x7f
 80005c8:	607b      	str	r3, [r7, #4]
	if (row == 2) col += 0xbf;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d102      	bne.n	80005d6 <cursorpos+0x22>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	33bf      	adds	r3, #191	; 0xbf
 80005d4:	607b      	str	r3, [r7, #4]
	sendCMD(col);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff78 	bl	80004d0 <sendCMD>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <num2text>:


int num2text(uint16_t cislo) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]

	static uint8_t i, j, k;
	static char text[16], pom;

	i = 15;
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <num2text+0xf4>)
 80005f4:	220f      	movs	r2, #15
 80005f6:	701a      	strb	r2, [r3, #0]
	while (cislo > 0) {
 80005f8:	e01f      	b.n	800063a <num2text+0x52>
		text[15-i] = cislo%10 + '0';
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <num2text+0xf4>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f1c3 000f 	rsb	r0, r3, #15
 8000602:	88fa      	ldrh	r2, [r7, #6]
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <num2text+0xf8>)
 8000606:	fba3 1302 	umull	r1, r3, r3, r2
 800060a:	08d9      	lsrs	r1, r3, #3
 800060c:	460b      	mov	r3, r1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	3330      	adds	r3, #48	; 0x30
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <num2text+0xfc>)
 8000620:	541a      	strb	r2, [r3, r0]
		cislo /= 10;
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <num2text+0xf8>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	80fb      	strh	r3, [r7, #6]
		i--;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <num2text+0xf4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <num2text+0xf4>)
 8000638:	701a      	strb	r2, [r3, #0]

	static uint8_t i, j, k;
	static char text[16], pom;

	i = 15;
	while (cislo > 0) {
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1dc      	bne.n	80005fa <num2text+0x12>
		text[15-i] = cislo%10 + '0';
		cislo /= 10;
		i--;
	}

	i = 15;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <num2text+0xf4>)
 8000642:	220f      	movs	r2, #15
 8000644:	701a      	strb	r2, [r3, #0]
	while (text[i] == '\0') i--;
 8000646:	e005      	b.n	8000654 <num2text+0x6c>
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <num2text+0xf4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <num2text+0xf4>)
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <num2text+0xf4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <num2text+0xfc>)
 800065c:	5c9b      	ldrb	r3, [r3, r2]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f2      	beq.n	8000648 <num2text+0x60>

	k = i;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <num2text+0xf4>)
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <num2text+0x100>)
 8000668:	701a      	strb	r2, [r3, #0]

	for (j=0;j<(i+1)/2;j++) {
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <num2text+0x104>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e023      	b.n	80006ba <num2text+0xd2>
		pom = text[j];
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <num2text+0x104>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <num2text+0xfc>)
 800067a:	5c9a      	ldrb	r2, [r3, r2]
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <num2text+0x108>)
 800067e:	701a      	strb	r2, [r3, #0]
		text[j] = text[k];
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <num2text+0x104>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <num2text+0x100>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <num2text+0xfc>)
 800068e:	5c59      	ldrb	r1, [r3, r1]
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <num2text+0xfc>)
 8000692:	5499      	strb	r1, [r3, r2]
		text[k] = pom;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <num2text+0x100>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <num2text+0x108>)
 800069c:	7819      	ldrb	r1, [r3, #0]
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <num2text+0xfc>)
 80006a0:	5499      	strb	r1, [r3, r2]
		k--;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <num2text+0x100>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <num2text+0x100>)
 80006ac:	701a      	strb	r2, [r3, #0]
	i = 15;
	while (text[i] == '\0') i--;

	k = i;

	for (j=0;j<(i+1)/2;j++) {
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <num2text+0x104>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <num2text+0x104>)
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <num2text+0x104>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <num2text+0xf4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	0fda      	lsrs	r2, r3, #31
 80006c8:	4413      	add	r3, r2
 80006ca:	105b      	asrs	r3, r3, #1
 80006cc:	4299      	cmp	r1, r3
 80006ce:	dbd0      	blt.n	8000672 <num2text+0x8a>
		pom = text[j];
		text[j] = text[k];
		text[k] = pom;
		k--;
	}
	return text;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <num2text+0xfc>)
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	2000001c 	.word	0x2000001c
 80006e0:	cccccccd 	.word	0xcccccccd
 80006e4:	20000020 	.word	0x20000020
 80006e8:	20000030 	.word	0x20000030
 80006ec:	20000031 	.word	0x20000031
 80006f0:	20000032 	.word	0x20000032

080006f4 <Delay>:
* Output         : None
* Return         : None
* Note					 : ffff=5mS
*******************************************************************************/
void Delay(uint32_t nCount)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 80006fc:	e002      	b.n	8000704 <Delay+0x10>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3b01      	subs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1f9      	bne.n	80006fe <Delay+0xa>
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  *  system_stm32l1xx.c file
  */

  /* TODO - Add your application code here */

	lcdInit();
 800071a:	f7ff fdff 	bl	800031c <lcdInit>

	clearLCD();
 800071e:	f7ff ff39 	bl	8000594 <clearLCD>
	int otacky = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]

	cursoroff();
 8000726:	f7ff ff3d 	bl	80005a4 <cursoroff>
	printString("Otacky: ");
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <main+0x48>)
 800072c:	f7ff ff16 	bl	800055c <printString>


  /* Infinite loop */
  while (1)
  {
	  otacky++;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]

	  cursorpos(9,1);
 8000736:	2101      	movs	r1, #1
 8000738:	2009      	movs	r0, #9
 800073a:	f7ff ff3b 	bl	80005b4 <cursorpos>
	  printString(num2text(otacky));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	b29b      	uxth	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff50 	bl	80005e8 <num2text>
 8000748:	4603      	mov	r3, r0
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff06 	bl	800055c <printString>
	  Delay(0xffff);
 8000750:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000754:	f7ff ffce 	bl	80006f4 <Delay>

  }
 8000758:	e7ea      	b.n	8000730 <main+0x1c>
 800075a:	bf00      	nop
 800075c:	080009fc 	.word	0x080009fc

08000760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000798 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000764:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000766:	e003      	b.n	8000770 <LoopCopyDataInit>

08000768 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 800076a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800076c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800076e:	3104      	adds	r1, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000774:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000776:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000778:	d3f6      	bcc.n	8000768 <CopyDataInit>
  ldr r2, =_sbss
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 800077c:	e002      	b.n	8000784 <LoopFillZerobss>

0800077e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000780:	f842 3b04 	str.w	r3, [r2], #4

08000784 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000788:	d3f9      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078a:	f000 f841 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f000 f903 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff ffbf 	bl	8000714 <main>
  bx lr
 8000796:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000798:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 800079c:	08000a10 	.word	0x08000a10
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007a4:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80007a8:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80007ac:	20000034 	.word	0x20000034

080007b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_IRQHandler>
	...

080007b4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80007c4:	e7fe      	b.n	80007c4 <HardFault_Handler+0x4>
 80007c6:	bf00      	nop

080007c8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>
 80007ce:	bf00      	nop

080007d0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80007d4:	e7fe      	b.n	80007d4 <BusFault_Handler+0x4>
 80007d6:	bf00      	nop

080007d8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80007dc:	e7fe      	b.n	80007dc <UsageFault_Handler+0x4>
 80007de:	bf00      	nop

080007e0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <SystemInit+0x5c>)
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <SystemInit+0x5c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000820:	4912      	ldr	r1, [pc, #72]	; (800086c <SystemInit+0x5c>)
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <SystemInit+0x5c>)
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <SystemInit+0x60>)
 8000828:	4013      	ands	r3, r2
 800082a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <SystemInit+0x5c>)
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <SystemInit+0x5c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000836:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800083a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <SystemInit+0x5c>)
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <SystemInit+0x5c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000846:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <SystemInit+0x5c>)
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <SystemInit+0x5c>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000852:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SystemInit+0x5c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800085a:	f000 f80d 	bl	8000878 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SystemInit+0x64>)
 8000860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000864:	609a      	str	r2, [r3, #8]
#endif
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	88ffc00c 	.word	0x88ffc00c
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000886:	4a41      	ldr	r2, [pc, #260]	; (800098c <SetSysClock+0x114>)
 8000888:	4b40      	ldr	r3, [pc, #256]	; (800098c <SetSysClock+0x114>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000890:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000892:	4b3e      	ldr	r3, [pc, #248]	; (800098c <SetSysClock+0x114>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3301      	adds	r3, #1
 80008a0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <SetSysClock+0x38>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008ae:	d1f0      	bne.n	8000892 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008b0:	4b36      	ldr	r3, [pc, #216]	; (800098c <SetSysClock+0x114>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80008bc:	2301      	movs	r3, #1
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	e001      	b.n	80008c6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d15a      	bne.n	8000982 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80008cc:	4a30      	ldr	r2, [pc, #192]	; (8000990 <SetSysClock+0x118>)
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <SetSysClock+0x118>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80008d8:	4a2d      	ldr	r2, [pc, #180]	; (8000990 <SetSysClock+0x118>)
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <SetSysClock+0x118>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f043 0302 	orr.w	r3, r3, #2
 80008e2:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80008e4:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <SetSysClock+0x118>)
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <SetSysClock+0x118>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008f0:	4a26      	ldr	r2, [pc, #152]	; (800098c <SetSysClock+0x114>)
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <SetSysClock+0x114>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <SetSysClock+0x11c>)
 80008fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000902:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000904:	bf00      	nop
 8000906:	4b23      	ldr	r3, [pc, #140]	; (8000994 <SetSysClock+0x11c>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f9      	bne.n	8000906 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000912:	4a1e      	ldr	r2, [pc, #120]	; (800098c <SetSysClock+0x114>)
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <SetSysClock+0x114>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <SetSysClock+0x114>)
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <SetSysClock+0x114>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000922:	4a1a      	ldr	r2, [pc, #104]	; (800098c <SetSysClock+0x114>)
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <SetSysClock+0x114>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <SetSysClock+0x114>)
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <SetSysClock+0x114>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000934:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <SetSysClock+0x114>)
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <SetSysClock+0x114>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000940:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <SetSysClock+0x114>)
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <SetSysClock+0x114>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800094c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800094e:	bf00      	nop
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <SetSysClock+0x114>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0f9      	beq.n	8000950 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <SetSysClock+0x114>)
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <SetSysClock+0x114>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	f023 0303 	bic.w	r3, r3, #3
 8000966:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <SetSysClock+0x114>)
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <SetSysClock+0x114>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	f043 0303 	orr.w	r3, r3, #3
 8000972:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000974:	bf00      	nop
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <SetSysClock+0x114>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 030c 	and.w	r3, r3, #12
 800097e:	2b0c      	cmp	r3, #12
 8000980:	d1f9      	bne.n	8000976 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40023800 	.word	0x40023800
 8000990:	40023c00 	.word	0x40023c00
 8000994:	40007000 	.word	0x40007000

08000998 <__libc_init_array>:
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <__libc_init_array+0x3c>)
 800099a:	b570      	push	{r4, r5, r6, lr}
 800099c:	461e      	mov	r6, r3
 800099e:	4c0e      	ldr	r4, [pc, #56]	; (80009d8 <__libc_init_array+0x40>)
 80009a0:	2500      	movs	r5, #0
 80009a2:	1ae4      	subs	r4, r4, r3
 80009a4:	10a4      	asrs	r4, r4, #2
 80009a6:	42a5      	cmp	r5, r4
 80009a8:	d004      	beq.n	80009b4 <__libc_init_array+0x1c>
 80009aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ae:	4798      	blx	r3
 80009b0:	3501      	adds	r5, #1
 80009b2:	e7f8      	b.n	80009a6 <__libc_init_array+0xe>
 80009b4:	f000 f816 	bl	80009e4 <_init>
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <__libc_init_array+0x44>)
 80009ba:	4c09      	ldr	r4, [pc, #36]	; (80009e0 <__libc_init_array+0x48>)
 80009bc:	461e      	mov	r6, r3
 80009be:	1ae4      	subs	r4, r4, r3
 80009c0:	10a4      	asrs	r4, r4, #2
 80009c2:	2500      	movs	r5, #0
 80009c4:	42a5      	cmp	r5, r4
 80009c6:	d004      	beq.n	80009d2 <__libc_init_array+0x3a>
 80009c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009cc:	4798      	blx	r3
 80009ce:	3501      	adds	r5, #1
 80009d0:	e7f8      	b.n	80009c4 <__libc_init_array+0x2c>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	08000a08 	.word	0x08000a08
 80009d8:	08000a08 	.word	0x08000a08
 80009dc:	08000a08 	.word	0x08000a08
 80009e0:	08000a0c 	.word	0x08000a0c

080009e4 <_init>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	bf00      	nop
 80009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ea:	bc08      	pop	{r3}
 80009ec:	469e      	mov	lr, r3
 80009ee:	4770      	bx	lr

080009f0 <_fini>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	bf00      	nop
 80009f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f6:	bc08      	pop	{r3}
 80009f8:	469e      	mov	lr, r3
 80009fa:	4770      	bx	lr
